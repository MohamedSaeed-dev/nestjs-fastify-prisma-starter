version: "3.8"

services:
  # Development Application with hot reload
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
      - "9229:9229" # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://dev_user:dev_password@postgres-dev:5432/nestjs_dev
      - REDIS_URL=redis://redis-dev:6379
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_started
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    command: npm run start:debug
    networks:
      - dev-network

  # Development PostgreSQL
  postgres-dev:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: nestjs_dev
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev-network

  # Development Redis
  redis-dev:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes
    networks:
      - dev-network

  # Database Management Tool
  adminer:
    image: adminer:4-standalone
    ports:
      - "8080:8080"
    depends_on:
      - postgres-dev
    networks:
      - dev-network

  # Redis Management Tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis-dev:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis-dev
    networks:
      - dev-network

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  dev-network:
    driver: bridge
